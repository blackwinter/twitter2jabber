#! /usr/bin/env ruby

#--
###############################################################################
#                                                                             #
# twitter2jabber - Twitter-to-Jabber gateway.                                 #
#                                                                             #
# Copyright (C) 2009-2011 Jens Wille                                          #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <ww@blackwinter.de>                                          #
#                                                                             #
# twitter2jabber is free software; you can redistribute it and/or modify it   #
# under the terms of the GNU Affero General Public License as published by    #
# the Free Software Foundation; either version 3 of the License, or (at your  #
# option) any later version.                                                  #
#                                                                             #
# twitter2jabber is distributed in the hope that it will be useful, but       #
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  #
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public      #
# License for more details.                                                   #
#                                                                             #
# You should have received a copy of the GNU Affero General Public License    #
# along with twitter2jabber. If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################
#++

$KCODE = 'u' if RUBY_VERSION < '1.9'

require 'optparse'
require 'yaml'

require 'rubygems'
require 'highline/import'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'twitter2jabber'

USAGE = "Usage: #{$0} [-h|--help] [options]"

def ask(prompt)
  super
rescue Interrupt
  puts
  exit
end

options = {
  :config         => 'config.yaml',
  :consumer_token => nil,
  :access_token   => nil,
  :jid            => nil,
  :recipients     => [],
  :formats        => nil,
  :template_dir   => nil,
  :loop           => false,
  :pause          => nil,
  :last           => nil,
  :wrap           => nil,
  :log            => STDERR,
  :verbose        => false,
  :debug          => false
}

OptionParser.new { |opts|
  opts.banner = USAGE

  opts.separator ' '
  opts.separator 'Options:'

  opts.on('-c', '--config YAML', "Path to config file [Default: #{options[:config]}]") { |c|
    options[:config] = c
  }

  opts.separator ' '

  opts.on('-C', '--consumer-token TOKEN', 'Twitter consumer token') { |t|
    options[:consumer_token] = t
  }

  opts.on('-A', '--access-token TOKEN', 'Twitter access token') { |t|
    options[:access_token] = t
  }

  opts.on('-j', '--jid ID', 'Jabber ID') { |j|
    options[:jid] = j
  }

  opts.separator ' '

  opts.on('-r', '--recipients LIST', 'Comma-separated list of Jabber IDs') { |r|
    options[:recipients] += r.split(',')
  }

  opts.on('-R', '--recipients-from-file FILE', 'File with one Jabber ID per line') { |r|
    options[:recipients] += File.readlines(r).map { |l| l.chomp }
  }

  opts.separator ' '

  opts.on('-f', '--formats LIST', "Comma-separated list of formats [Default: #{Twitter2Jabber::DEFAULT_FORMATS.join(',')}]") { |f|
    options[:formats] = f.split(',')
  }

  opts.on('-t', '--template-dir PATH', 'Path to custom template directory', "[Default: #{Twitter2Jabber::DEFAULT_TEMPLATES}]") { |t|
    abort "Template directory not found: #{t}" unless File.directory?(t)
    options[:template_dir] = t
  }

  opts.separator ' '

  opts.on('-l', '--loop', 'Run in a loop') {
    options[:loop] = true
  }

  opts.on('-p', '--pause SECONDS', Integer, 'Number of seconds to pause between loops') { |p|
    options[:pause] = p
  }

  opts.separator ' '

  opts.on('-S', '--since-id ID', 'Return tweets with status IDs greater than ID') { |i|
    options[:last] = i
  }

  opts.separator ' '

  opts.on('-L', '--loop-wrap [LOG]', "Convenience switch: implies '--loop', '--verbose', and", "'--since-id'; kills existing process and logs output to LOG") { |l|
    options[:wrap] = true
    options[:log]  = l && File.open(l, 'a')
  }

  opts.separator ' '
  opts.separator 'Generic options:'

  opts.on('-v', '--verbose', 'Be verbose') {
    options[:verbose] = true
  }

  opts.on('-D', '--debug', "Print debug output and don't send or update anything") {
    options[:debug] = true
  }

  opts.on('-h', '--help', 'Print this help message and exit') {
    puts opts
    exit
  }

  opts.on('--version', 'Print program version and exit') {
    puts "#{File.basename($0)} v#{Twitter2Jabber::VERSION}"
    exit
  }
}.parse!

config = begin
  YAML.load_file(options[:config])
rescue Errno::ENOENT
  {}
end

# twitter config
config[:twitter] ||= {}
config[:twitter][:consumer_token]    = options[:consumer_token] if options[:consumer_token]
config[:twitter][:consumer_token]  ||= ask('Twitter consumer token: ')
config[:twitter][:consumer_secret] ||= ask("Consumer secret for Twitter application #{config[:twitter][:consumer_token]}: ") { |q| q.echo = false }
config[:twitter][:access_token]      = options[:access_token] if options[:access_token]
config[:twitter][:access_token]    ||= ask('Twitter access token: ')
config[:twitter][:access_secret]   ||= ask("Access secret for Twitter user #{config[:twitter][:access_token]}: ") { |q| q.echo = false }

# jabber config
config[:jabber] ||= {}
config[:jabber][:user] = options[:jid] if options[:jid]
config[:jabber][:user] ||= ask('Jabber ID: ')
config[:jabber][:pass] ||= ask("Password for Jabber ID #{config[:jabber][:user]}: ") { |q| q.echo = false }

recipients = options[:recipients] + (config.delete(:recipients) || [])
recipients.uniq!

[:formats, :template_dir, :log, :verbose, :debug].each { |key|
  config[key] = options[key] if options[key]
}

begin
  if options[:wrap]
    options[:loop]   = true
    config[:verbose] = true

    case log = config[:log]
      when String
        config[:log] = File.open(log, 'a')
      when File
        log = log.path
      when IO
        abort "Invalid log file: #{log.tty? ? "FILENO=#{log.fileno}" : log}"
      else
        abort 'Log file missing!'
    end

    if File.readable?(log)
      require 'elif'

      pid = nil

      Elif.foreach(log) { |line|
        case line.chomp
          when /\A(\d+)\z/
            pid ||= $1.to_i
            break if options[:last]
          when / TWITTER (\d+)\z/
            options[:last] ||= $1.to_i
            break if pid
        end
      }

      begin
        Process.kill(:INT, pid)
        sleep 1
      rescue Errno::ESRCH
      end if pid
    end
  end

  twitter2jabber = Twitter2Jabber.new(config)

  if options[:loop]
    twitter2jabber.send(:log_, Process.pid)
    twitter2jabber.loop(recipients, options[:pause] || config[:pause], options[:last])
  else
    twitter2jabber.run(recipients, options[:last])
  end
rescue RuntimeError => err
  abort err
end
